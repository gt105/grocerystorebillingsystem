import json
from typing import Dict, List
from datetime import datetime

CART_FILE = "cart.json"
HISTORY_FILE = "purchase_history.json"
DISCOUNT_THRESHOLD = 500  # INR
DISCOUNT_PERCENT = 10      # %

# ----------------- Store Data -----------------
items: Dict[str, Dict] = {
    "apple": {"price": 50, "category": "Fruits"},
    "banana": {"price": 10, "category": "Fruits"},
    "orange": {"price": 20, "category": "Fruits"},
    "milk": {"price": 40, "category": "Dairy"},
    "bread": {"price": 35, "category": "Bakery"},
    "eggs": {"price": 5, "category": "Dairy"}
}

cart: Dict[str, int] = {}

# ----------------- Helper Functions -----------------
def save_json(filename: str, data) -> None:
    with open(filename, "w") as f:
        json.dump(data, f, indent=4)

def load_json(filename: str, default=None):
    try:
        with open(filename, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default if default is not None else {}

def save_cart() -> None:
    save_json(CART_FILE, cart)

def load_cart() -> None:
    global cart
    cart_data = load_json(CART_FILE, default={})
    cart = cart_data

def save_purchase_history(purchase: Dict) -> None:
    history = load_json(HISTORY_FILE, default=[])
    history.append(purchase)
    save_json(HISTORY_FILE, history)

# ----------------- Store Functions -----------------
def view_items_by_category(category: str = None) -> None:
    """View all items or filter by category."""
    print("\nAvailable Items:")
    filtered_items = {name: data for name, data in items.items() if category is None or data["category"].lower() == category.lower()}
    if not filtered_items:
        print("No items found.")
        return
    for name, data in sorted(filtered_items.items()):
        print(f"{name.capitalize():<10} - {data['price']} INR - Category: {data['category']}")

def search_item() -> None:
    """Search item by name."""
    query = input("Enter item name to search: ").strip().lower()
    results = {name: data for name, data in items.items() if query in name.lower()}
    if results:
        print("\nSearch Results:")
        for name, data in results.items():
            print(f"{name.capitalize():<10} - {data['price']} INR - Category: {data['category']}")
    else:
        print("No matching items found.")

def add_to_cart() -> None:
    item_name = input("Enter item name to add to cart: ").strip().lower()
    if item_name not in items:
        print("Item not available!")
        return
    try:
        quantity = int(input(f"Enter quantity of {item_name}: ").strip())
        if quantity <= 0:
            print("Quantity should be greater than zero.")
            return
    except ValueError:
        print("Invalid quantity! Please enter a number.")
        return
    cart[item_name] = cart.get(item_name, 0) + quantity
    save_cart()
    print(f"{quantity} {item_name}(s) added to cart.")

def remove_from_cart() -> None:
    if not cart:
        print("Cart is empty!")
        return
    item_name = input("Enter item name to remove: ").strip().lower()
    if item_name not in cart:
        print("Item not in cart!")
        return
    try:
        quantity = int(input(f"Enter quantity to remove: ").strip())
        if quantity <= 0:
            print("Quantity should be greater than zero.")
            return
    except ValueError:
        print("Invalid quantity! Please enter a number.")
        return
    if quantity >= cart[item_name]:
        del cart[item_name]
        print(f"{item_name} removed from cart.")
    else:
        cart[item_name] -= quantity
        print(f"{quantity} {item_name}(s) removed from cart.")
    save_cart()

def view_cart() -> float:
    if not cart:
        print("Your cart is empty!")
        return 0.0
    print("\nYour Cart:")
    total = 0
    for item, qty in cart.items():
        cost = items[item]["price"] * qty
        total += cost
        print(f"{item.capitalize():<10} x {qty:<3} = {cost} INR")
    if total >= DISCOUNT_THRESHOLD:
        discount = total * DISCOUNT_PERCENT / 100
        final_total = total - discount
        print(f"\nSubtotal: {total} INR")
        print(f"Discount: {DISCOUNT_PERCENT}% (-{discount} INR)")
        print(f"Total Bill: {final_total} INR")
        return final_total
    else:
        print(f"Total Bill: {total} INR")
        return total

def checkout() -> None:
    if not cart:
        print("Cart is empty! Add items before checkout.")
        return
    print("\n=== Checkout ===")
    total = view_cart()
    purchase = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "items": cart.copy(),
        "total": total
    }
    save_purchase_history(purchase)
    cart.clear()
    save_cart()
    print("\nThank you for shopping! Purchase saved.")

def view_purchase_history() -> None:
    history = load_json(HISTORY_FILE, default=[])
    if not history:
        print("\nNo purchase history found.")
        return
    print("\n=== Purchase History ===")
    for idx, purchase in enumerate(history, start=1):
        print(f"\nPurchase {idx}: {purchase['timestamp']}")
        for item, qty in purchase["items"].items():
            cost = items.get(item, {"price":0})["price"] * qty
            print(f"{item.capitalize():<10} x {qty:<3} = {cost} INR")
        print(f"Total: {purchase['total']} INR")

# ----------------- Main Menu -----------------
def main() -> None:
    load_cart()
    menu_options = {
        "1": lambda: view_items_by_category(),
        "2": lambda: view_items_by_category(input("Enter category to filter (leave empty for all): ").strip() or None),
        "3": search_item,
        "4": add_to_cart,
        "5": remove_from_cart,
        "6": view_cart,
        "7": checkout,
        "8": view_purchase_history,
        "9": lambda: print("Exiting store. Goodbye!")
    }

    while True:
        print("\n=== Grocery Store Menu ===")
        print("1. View All Items")
        print("2. View Items by Category")
        print("3. Search Item")
        print("4. Add to Cart")
        print("5. Remove from Cart")
        print("6. View Cart")
        print("7. Checkout")
        print("8. View Purchase History")
        print("9. Exit")

        choice = input("Enter your choice: ").strip()
        action = menu_options.get(choice)
        if action:
            action()
            if choice == "9":
                break
        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()
